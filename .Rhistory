library(rpart.plot)
library(caret)
library(xgboost)
library(pROC)
full = fread('././data/turnover.csv', stringsAsFactors = T)
full = fread('../data/turnover.csv', stringsAsFactors = T)
full = full[sample(.N)]
full = fread('../data/turnover.csv', stringsAsFactors = T)
full = full[sample(.N)]
full = fread('../data/turnover.csv', stringsAsFactors = T)
View(full)
full = full[sample(.N)]
full = fread('../data/turnover.csv', stringsAsFactors = T)
full = full[sample(.N)]
full = fread('../data/turnover.csv', stringsAsFactors = T)
full = full[sample(.N)]
full = fread('../data/turnover.csv', stringsAsFactors = T)
devtools::install_github("AppliedDataSciencePartners/xgboostExplainer")
library("lattice", lib.loc="C:/Program Files/R/packages")
devtools::install_github("AppliedDataSciencePartners/xgboostExplainer")
if(!require(breakDown)){devtools::install_github("pbiecek/breakDown")}
#if(!require(breakDown)){devtools::install_github("pbiecek/breakDown")}
if(!require(easypackages)){install.packages("easypackages")}
library(easypackages)
packages("plyr","dplyr","ggplot2", "readr", "tidyr", "gridExtra", "stringr", "lubridate",
"caret", "gbm", "modelr", "ggthemes", "lightgbm", prompt = FALSE)
options(scipen = 999)#Do not display exponents
library("breakDown", lib.loc="C:/Program Files/R/packages")
head(HR_data, 3)
library("randomForest")
model_rf <- randomForest(factor(left)~., data = HR_data, family = "binomial", maxnodes = 5)
library("randomForest")
model_rf <- randomForest(factor(left)~., data = HR_data, family = "binomial", maxnodes = 5)
predict.function <- function(model, new_observation) predict(model, new_observation, type="prob")[,2]
predict.function(model, HR_data[11,-7])
library("randomForest")
model_rf <- randomForest(factor(left)~., data = HR_data, family = "binomial", maxnodes = 5)
predict.function <- function(model_rf, new_observation) predict(model_rf, new_observation, type="prob")[,2]
predict.function(model_rf, HR_data[11,-7])
explain_rf <- broken(model, HR_data[11,-7], data = HR_data[,-7], predict.function = predict.function,
direction = "down")
explain_rf <- broken(model_rf, HR_data[11,-7], data = HR_data[,-7], predict.function = predict.function,
direction = "down")
explain_rf
plot(explain_rf) + ggtitle("breakDown plot  (direction=down) for randomForest model")
explain_2 <- broken(model_rf, HR_data[11,-7], data = HR_data[,-7],
predict.function = predict.function,
direction = "up")
plot(explain_2) + ggtitle("breakDown plot (direction=up) for randomForest model")
model_glm <- glm(left~., data = HR_data, family = "binomial")
predict(model_glm, HR_data[11,], type = "link")
explain_glm <- broken(model_glm, HR_data[11,])
explain_glm
plot(explain_glm) + ggtitle("breakDown plot for linear predictors")
HR_data[11,]
url <- 'https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv'
wine <- read.table(url, header = T, sep=";")
wine <- read.table(./data/Wine.csv, header = T, sep=";")
wine <- read.csv(./data/Wine.csv, header = T)
wine <- read.csv("./data/Wine.csv", header = T)
head(wine, 3)
wine <- read.csv("./data/winequality-white.csv", header = T)
wine <- read.table("./data/winequality-white.csv", header = T, sep=";")
head(wine, 3)
model_lm <- lm(quality ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar +
chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + sulphates + alcohol,
data = wine)
new_observation <- wine[1,]
br <- broken(model_lm, new_observation)
br
plot(br)
library(caret)
set.seed(2)
library(caret)
set.seed(2)
training <- twoClassSim(50, linearVars = 2)
#twoClassSim simulates regression and classification data with truly important predictors and irrelevant predictions
trainX <- training[, -ncol(training)]
trainY <- training$Class
head(training)
cctrl1 <- trainControl(method = "cv", number = 3, returnResamp = "all",
classProbs = TRUE, summaryFunction = twoClassSummary)
test_class_cv_model <- train(trainX, trainY, method = "glm", trControl = cctrl1,
metric = "ROC", preProc = c("center", "scale"))
test_class_cv_model
predict.fun <- function(model, x) predict(model, x, type = "prob")[,1]
testing <- twoClassSim(10, linearVars = 2)
predict.fun(test_class_cv_model, testing[1,])
library("breakDown")
explain_caret <- broken(test_class_cv_model, testing[1,], data = trainX, predict.function = predict.fun)
explain_caret
plot(explain_caret) + ggtitle("breakDown plot for caret/glm model")
library(ranger)
HR_data$left <- factor(HR_data$left)
model_ranger <- ranger(left ~ ., data = HR_data, importance = 'impurity', probability=TRUE, min.node.size = 2000)
predict.function <- function(model_ranger, new_observation)
predict(model_ranger, new_observation, type = "response")$predictions[,2]
predict.function(model_ranger, HR_data[11,])
explain_ranger <- broken(model_ranger, HR_data[11,-7], data = HR_data[,-7],
predict.function = predict.function, direction = "down")
explain_ranger
plot(explain_ranger) + ggtitle("breakDown plot  (direction=down) for ranger model")
nobs <- wine[5, , drop = FALSE]
base_prediction <- predict(wine_svm_model_kern, nobs)
library(kernlab)
wine_svm_model_kern <- ksvm(quality~., data = wine)
wine_svm_model_kern
library(e1071)
wine_svm_model_e <- svm(quality~., data = wine)
wine_svm_model_e
nobs <- wine[5, , drop = FALSE]
base_prediction <- predict(wine_svm_model_kern, nobs)
set.seed(1313)
explain_5_kern <- broken(wine_svm_model_kern, new_observation = nobs,
data = wine, predict.function = predict,
baseline = "intercept", direction = "up")
explain_5_kern
plot(explain_5_kern) + ggtitle(paste0("Prediction for SVM model ", round(base_prediction, 3)))
base_prediction
nobs <- wine[5, , drop = FALSE]
predict(wine_svm_model_kern, nobs)
set.seed(1313)
explain_5_kern <- broken(wine_svm_model_kern, new_observation = nobs,
data = wine, predict.function = predict,
baseline = "intercept", direction = "up")
base_prediction2 <- predict(wine_svm_model_e, nobs)
set.seed(1313)
explain_5_e <- broken(wine_svm_model_e, new_observation = nobs,
data = wine, predict.function = predict,
baseline = "intercept", direction = "up")
explain_5_e
plot(explain_5_e) + ggtitle(paste0("Prediction for SVM e1071 model ", round(base_prediction2, 3)))
library(xgboost)
model_matrix_train <- model.matrix(left ~ . - 1, HR_data)
data_train <- xgb.DMatrix(model_matrix_train, label = as.numeric(HR_data$left))
param <- list(objective = "reg:linear")
HR_xgb_model <- xgb.train(param, data_train, nrounds = 50)
HR_xgb_model
nobs <- model_martix_train[1L, , drop = FALSE]
nobs <- model_matrix_train[1L, , drop = FALSE]
explain_xgb <- broken(HR_xgb_model, new_observation = nobs,
data = model_martix_train)
nobs <- model_matrix_train[1L, , drop = FALSE]
explain_xgb <- broken(HR_xgb_model, new_observation = nobs,
data = model_matrix_train)
nobs
explain_xgb <- broken(HR_xgb_model, new_observation = nobs, data = model_matrix_train)
HR_xgb_model
library(xgboost)
model_matrix_train <- model.matrix(left ~ . - 1, HR_data)
data_train <- xgb.DMatrix(model_matrix_train, label = as.numeric(HR_data$left))
param <- list(objective = "reg:linear")
HR_xgb_model <- xgb.train(param, data_train, nrounds = 50)
HR_xgb_model
nobs <- model_matrix_train[1L, , drop = FALSE]
explain_xgb <- broken(HR_xgb_model, new_observation = nobs, data = model_matrix_train)
explain_xgb <- broken(HR_xgb_model, new_observation = nobs)
explain_xgb <- broken(HR_xgb_model, new_observation = nobs, data = model_matrix_train)
model_matrix_train
nobs
dim(nobs)
dim(model_matrix_train)
explain_xgb <- broken(HR_xgb_model, new_observation = nobs, data = model_matrix_train)#NOT WORKING
devtools::install_github("pbiecek/breakDown")
#if(!require(breakDown)){devtools::install_github("pbiecek/breakDown")}
if(!require(easypackages)){install.packages("easypackages")}
library(easypackages)
packages("plyr","dplyr","ggplot2", "readr", "tidyr", "gridExtra", "stringr", "lubridate",
"caret", "gbm", "modelr", "ggthemes", "breakDown", prompt = FALSE)
options(scipen = 999)#Do not display exponents
library(xgboost)
model_matrix_train <- model.matrix(left ~ . - 1, HR_data)
data_train <- xgb.DMatrix(model_matrix_train, label = as.numeric(HR_data$left))
param <- list(objective = "reg:linear")
HR_xgb_model <- xgb.train(param, data_train, nrounds = 50)
HR_xgb_model
nobs <- model_matrix_train[1L, , drop = FALSE]
explain_xgb <- broken(HR_xgb_model, new_observation = nobs, data = model_matrix_train)#NOT WORKING
#see https://pbiecek.github.io/breakDown/articles/break_xgboost.html
explain_xgb
plot(explain_xgb) + ggtitle("breakDown plot for xgboost model")
#if(!require(breakDown)){devtools::install_github("dgrtwo/gganimate")}
if(!require(easypackages)){install.packages("easypackages")}
library(easypackages)
packages("dplyr","ggplot2", "gganimate", "gapminder", "tweenr", prompt = FALSE)
options(scipen = 999)#Do not display exponents
# For example, suppose we wanted to create an animation similar to the Gapminder
# world animation, using Jenny Bryan's gapminder package for the data.
gapminder <- gapminder
theme_set(theme_bw())
p <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent, frame = year)) +
geom_point() +
scale_x_log10()
# Notice we added frame = year and saved the plot as p.
# We then display it as an animation with the gg_animate function:
gganimate(p)
gapminder_edit <- gapminder %>%
arrange(country, year) %>%
select(gdpPercap,lifeExp,year,country, continent, pop) %>%
rename(x=gdpPercap,y=lifeExp,time=year,id=country) %>%
mutate(ease="linear")
gapminder_tween <- tween_elements(gapminder_edit,
"time", "id", "ease", nframes = 300) %>%
mutate(year = round(time), country = .group) %>%
left_join(gapminder, by=c("country","year","continent")) %>%
rename(population = pop.x)
p2 <- ggplot(gapminder_tween,
aes(x=x, y=y, frame = .frame)) +
geom_point(aes(size=population, color=continent),alpha=0.8) +
xlab("GDP per capita") +
ylab("Life expectancy at birth") + scale_x_log10()
gganimate(p2, filename="gapminder-tween.gif", title_frame = FALSE, interval = 0.05)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(~continent)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(~continent)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) +
facet_wrap(~continent, scales = "free") + scale_x_log10()
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(c("continent"), scales = "free")
str(gapminder)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(c(continent ~ .), scales = "free")
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(continent ~ ., scales = "free")
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(levels(continent), scales = "free")
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(levels(gapmoinder$continent), scales = "free")
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(levels(gapminder$continent), scales = "free")
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(. ~continent), scales = "free")
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(. ~continent, scales = "free")
class(mpg$class)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(as.character(gapminder$continent), scales = "free")
as.character(gapminder$continent)
gapminder2 <- gapminder %>% mutate(continent, as.character())
gapminder2 <- gapminder %>% mutate(continent, as.character)
gapminder2 <- gapminder %>% mutate(continent, as.character())
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(~continent, scales = "free")
#if(!require(breakDown)){devtools::install_github("dgrtwo/gganimate")}
if(!require(easypackages)){install.packages("easypackages")}
library(easypackages)
packages("dplyr", "gganimate", "gapminder", "tweenr", "ggplot2", prompt = FALSE)
options(scipen = 999)#Do not display exponents
# For example, suppose we wanted to create an animation similar to the Gapminder
# world animation, using Jenny Bryan's gapminder package for the data.
gapminder <- gapminder
theme_set(theme_bw())
p <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent, frame = year)) +
geom_point() + scale_x_log10()
# Notice we added frame = year and saved the plot as p.
# We then display it as an animation with the gg_animate function:
gganimate(p)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(~continent, scales = "free")
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(~factor(continent), scales = "free")
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(~ factor(continent), scales = "free")
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(~ continent, scales = "free")
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap("continent", scales = "free")
library(ggplot2)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap("continent", scales = "free")
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(~continent, scales = "free")
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(~continent)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(~continent, scales = "free")
gapminder2 <- gapminder
gapminder2$continent <- as.character(gapminder2$continent)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(~continent, scales = "free")
ggplot(gapminder2, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(~continent, scales = "free")
ggplot(gapminder2, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(gapminder2$continent, scales = "free")
ggplot(gapminder2, aes(gdpPercap, lifeExp, size = pop, frame = year)) + geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) + facet_wrap(~ continent, scales = "free")
p5 <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) +
geom_point() +
geom_smooth(aes(group = year), method = "lm", show.legend = FALSE) +
facet_wrap(~continent, scales = "free") +
scale_x_log10()
getwd()
setwd("~/GitHub/Visualizations")
# load data
nations <- read_csv("./data/nations.csv")
#if(!require(breakDown)){devtools::install_github("dgrtwo/gganimate")}
if(!require(easypackages)){install.packages("easypackages")}
library(easypackages)
packages("dplyr", "gganimate", "gapminder", "tweenr", "ggplot2", "readr", prompt = FALSE)
options(scipen = 999)#Do not display exponents
# load data
nations <- read_csv("./data/nations.csv")
# filter for 2014 data only
nations2014 <- nations %>%  filter(year == 2014)
# make bubble chart
ggplot(nations2014, aes(x = gdp_percap, y = life_expect)) +
xlab("GDP per capita") +  ylab("Life expectancy at birth") +
theme_minimal(base_size = 12, base_family = "Georgia") +
geom_point(aes(size = population, color = region), alpha = 0.7) +
scale_size_area(guide = FALSE, max_size = 15) +
scale_x_continuous(labels = dollar) +
stat_smooth(formula = y ~ log10(x), se = FALSE, size = 0.5, color = "black", linetype="dotted") +
scale_color_brewer(name = "", palette = "Set2") +
theme(legend.position=c(0.8,0.4))
# make bubble chart
ggplot(nations2014, aes(x = gdp_percap, y = life_expect)) +
xlab("GDP per capita") +  ylab("Life expectancy at birth") +
theme_minimal(base_size = 12, base_family = "Georgia") +
geom_point(aes(size = population, color = region), alpha = 0.7) +
scale_size_area(guide = FALSE, max_size = 15) +
scale_x_continuous(labels = scales::dollar) +
stat_smooth(formula = y ~ log10(x), se = FALSE, size = 0.5, color = "black", linetype="dotted") +
scale_color_brewer(name = "", palette = "Set2") +
theme(legend.position=c(0.8,0.4))
# load data
nations <- read_csv("./data/nations.csv")
# filter for 2014 data only
nations2014 <- nations %>%  filter(year == 2014)
# make bubble chart
ggplot(nations2014, aes(x = gdp_percap, y = life_expect)) +
xlab("GDP per capita") +  ylab("Life expectancy at birth") +
theme_minimal(base_size = 12, base_family = "Georgia") +
geom_point(aes(size = population, color = region), alpha = 0.7) +
scale_size_area(guide = FALSE, max_size = 15) +
scale_x_continuous(labels = scales::dollar) +
stat_smooth(formula = y ~ log10(x), se = FALSE, size = 0.5, color = "black", linetype="dotted") +
scale_color_brewer(name = "", palette = "Set2") +
theme(legend.position=c(0.8,0.4))
# make bubble chart
ggplot(nations2014, aes(x = gdp_percap, y = life_expect)) +
xlab("GDP per capita") +  ylab("Life expectancy at birth") +
theme_minimal(base_size = 12) +
geom_point(aes(size = population, color = region), alpha = 0.7) +
scale_size_area(guide = FALSE, max_size = 15) +
scale_x_continuous(labels = scales::dollar) +
stat_smooth(formula = y ~ log10(x), se = FALSE, size = 0.5, color = "black", linetype="dotted") +
scale_color_brewer(name = "", palette = "Set2") +
theme(legend.position=c(0.8,0.4))
nations_chart <- ggplot(nations, aes(x = gdp_percap, y = life_expect, frame = year)) +
xlab("GDP per capita") +
ylab("Life expectancy at birth") +
theme_minimal(base_size = 16, base_family = "Georgia") +
geom_point(aes(size = population, color = region), alpha = 0.7) +
scale_size_area(guide = FALSE, max_size = 20) +
scale_x_continuous(labels = dollar) +
stat_smooth(aes(group = year), formula = y ~ log10(x), se = FALSE, size = 0.5, color = "black", linetype="dotted") +
scale_color_brewer(name = "", palette = "Set2") +
theme(legend.position=c(0.8,0.4))
nations_chart <- ggplot(nations, aes(x = gdp_percap, y = life_expect, frame = year)) +
xlab("GDP per capita") +
ylab("Life expectancy at birth") +
theme_minimal(base_size = 16) +
geom_point(aes(size = population, color = region), alpha = 0.7) +
scale_size_area(guide = FALSE, max_size = 20) +
scale_x_continuous(labels = scales::dollar) +
stat_smooth(aes(group = year), formula = y ~ log10(x), se = FALSE, size = 0.5, color = "black", linetype="dotted") +
scale_color_brewer(name = "", palette = "Set2") +
theme(legend.position=c(0.8,0.4))
gg_animate(nations_chart)
gganimate(nations_chart)
# load data
warming <- read_csv("./data/warming.csv")
# set color palette and sequence of values to apply it to
pal <- c("#313695","#4575b4","#74add1","#abd9e9","#e0f3f8","#ffffbf","#fee090","#fdae61","#f46d43","#d73027","#a50026")
vals <- seq(-2, 2, length = 11)
# draw chart
ggplot(warming, aes(x = year, y = annual)) +
geom_line(colour="black") +
geom_point(shape = 21, colour="black", aes(fill=annual), size=5, stroke=1) +
scale_x_continuous(limits=c(1880,2015)) +
scale_y_continuous(limits=c(-0.5,1)) +
theme_minimal() +
scale_fill_gradientn(colors = pal, values = vals, rescaler = function(x, ...) x, oob = identity, guide=FALSE) +
xlab("") +
ylab("Difference from 1951-1980 (ºC)") +
theme(text=element_text(size=16, family="Georgia"))
ggplot(warming, aes(x = year, y = annual)) +
geom_line(colour="black") +
geom_point(shape = 21, colour="black", aes(fill=annual), size=5, stroke=1) +
scale_x_continuous(limits=c(1880,2015)) +
scale_y_continuous(limits=c(-0.5,1)) +
theme_minimal()
ggplot(warming, aes(x = year, y = annual)) +
geom_line(colour="black") +
geom_point(shape = 21, colour="black", aes(fill=annual), size=5, stroke=1) +
scale_x_continuous(limits=c(1880,2015)) +
scale_y_continuous(limits=c(-0.5,1)) +
theme_minimal() +
scale_fill_gradientn(colors = pal, values = vals, rescaler = function(x, ...) x, oob = identity, guide=FALSE) +
xlab("") +
ylab("Difference from 1951-1980 (ºC)") +
theme(text=element_text(size=16))
ggplot(warming, aes(x = year, y = annual)) +
geom_line(colour="black") +
geom_point(shape = 21, colour="black", aes(fill=annual), size=5, stroke=1) +
scale_x_continuous(limits=c(1880,2015)) +
scale_y_continuous(limits=c(-0.5,1)) +
theme_minimal() +
#scale_fill_gradientn(colors = pal, values = vals, rescaler = function(x, ...) x, oob = identity, guide=FALSE) +
xlab("") +
ylab("Difference from 1951-1980 (ºC)") +
theme(text=element_text(size=16))
df <- data.frame(a = 1:100, b = rnorm(100, mean = 1000, sd = 500))
ggplot(data.frame(x=seq(along=x), y=rnorm(100, mean = 1000, sd = 500)), aes(x=x, y=y, colour=y)) +
geom_point() +
scale_colour_gradientn(values=c(0, 1000, 2000, 3000),
colours=c("green", "blue", "red", "yellow"),
rescaler=function(x, ...) x, oob=identity)
# draw chart
ggplot(warming, aes(x = year, y = annual)) +
geom_line(colour="black") +
geom_point(shape = 21, colour="black", aes(fill=annual), size=5, stroke=1) +
scale_x_continuous(limits=c(1880,2015)) +
scale_y_continuous(limits=c(-0.5,1)) +
theme_minimal() +
scale_fill_gradientn(colors = pal, values = vals, rescaler = function(x, ...) x, oob = identity) +
xlab("") +
ylab("Difference from 1951-1980 (ºC)") +
theme(text=element_text(size=16))
# draw chart
ggplot(warming, aes(x = year, y = annual)) +
geom_line(colour="black") +
geom_point(shape = 21, colour="black", aes(fill=annual), size=5, stroke=1) +
scale_x_continuous(limits=c(1880,2015)) +
scale_y_continuous(limits=c(-0.5,1)) +
theme_minimal() +
scale_fill_gradientn(colors = pal, values = vals, oob = identity, guide=FALSE) +
xlab("") + ylab("Difference from 1951-1980 (ºC)") + theme(text=element_text(size=12))
# draw chart
ggplot(warming, aes(x = year, y = annual)) +
geom_line(colour="black") +
geom_point(shape = 21, colour="black", aes(fill=annual), size=5, stroke=1) +
scale_x_continuous(limits=c(1880,2015)) +
scale_y_continuous(limits=c(-0.5,1)) +
theme_minimal() +
scale_fill_gradientn(colors = pal, oob = identity, guide=FALSE) +
xlab("") + ylab("Difference from 1951-1980 (ºC)") + theme(text=element_text(size=12))
vals
# draw chart
ggplot(warming, aes(x = year, y = annual)) +
geom_line(colour="black") +
geom_point(shape = 21, colour="black", aes(fill=annual), size=5, stroke=1) +
scale_x_continuous(limits=c(1880,2015)) +
scale_y_continuous(limits=c(-0.5,1)) +
theme_minimal() +
scale_fill_gradientn(colors = pal, values = vals, rescaler = function(x, ...) x, guide=FALSE) +
xlab("") + ylab("Difference from 1951-1980 (ºC)") + theme(text=element_text(size=12))
# create the animation
warming_chart <- ggplot(warming, aes(x = year, y = annual, frame = year, cumulative = TRUE)) +
geom_line(colour="black") +
geom_point(shape = 21, colour="black", aes(fill=annual), size=5, stroke=1) +
scale_x_continuous(limits=c(1880,2015)) +
scale_y_continuous(limits=c(-0.5,1)) +
theme_minimal() +
scale_fill_gradientn(colors = pal, values = vals, rescaler = function(x, ...) x, guide=FALSE) +
xlab("") +
ylab("Difference from 1951-1980 (ºC)") +
theme(text=element_text(size=16, family="Georgia"))
# run in the viewer
gg_animate(warming_chart, interval = 0.1)
# run in the viewer
gganimate(warming_chart, interval = 0.1)
# prepare data
nations_edit <- nations %>%
arrange(country, year) %>% select(gdp_percap,life_expect,year,country) %>%
rename(x=gdp_percap,y=life_expect,time=year,id=country) %>% mutate(ease="linear")
# tween
nations_tween <- tween_elements(nations_edit, "time", "id", "ease", nframes = 300)
# create year and country fields, for join
nations_tween <- nations_tween %>% mutate(year = round(time), country = .group)
# join
nations_tween <- inner_join(nations_tween,nations)
# make animated chart
nations_tween_chart <- ggplot(nations_tween, aes(x = x, y = y, frame = .frame)) +
xlab("GDP per capita") +
ylab("Life expectancy at birth") +
theme_minimal(base_size = 16, base_family = "Georgia") +
geom_point(aes(size = population, color = region), alpha = 0.7) +
scale_size_area(guide = FALSE, max_size = 20) +
scale_x_continuous(labels = dollar) +
scale_color_brewer(name = "", palette = "Set2") +
theme(legend.position=c(0.8,0.4))
# make animated chart
nations_tween_chart <- ggplot(nations_tween, aes(x = x, y = y, frame = .frame)) +
xlab("GDP per capita") +
ylab("Life expectancy at birth") +
theme_minimal(base_size = 16, base_family = "Georgia") +
geom_point(aes(size = population, color = region), alpha = 0.7) +
scale_size_area(guide = FALSE, max_size = 20) +
scale_x_continuous(labels = scales::dollar) +
scale_color_brewer(name = "", palette = "Set2") +
theme(legend.position=c(0.8,0.4))
# run in the viewer
gg_animate(nations_tween_chart, title_frame = FALSE, interval = 0.05)
# run in the viewer
gganimate(nations_tween_chart, title_frame = FALSE, interval = 0.05)
